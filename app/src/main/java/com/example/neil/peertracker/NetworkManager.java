package com.example.neil.peertracker;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiManager;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Timer;

public class NetworkManager {
    final String INT_ENTERPRISEFIELD_NAME ="android.net.wifi.WifiConfiguration$EnterpriseField";
    private static final String TAG = "NetworkManager";
    private volatile WifiConfiguration targetWifiConfiguration = null;
    private Timer wifiTimeoutTimer = new Timer();
    static final String WEP_HEX_PATTERN = "[\\dA-Fa-f]+";
    private Context m_context;
    private WifiManager m_wifi;
    private WifiManagerListener m_listener;
    private BroadcastReceiver m_scanner;

    public NetworkManager(Context context) {
        m_context = context;
        m_wifi = (WifiManager) m_context.getSystemService(Context.WIFI_SERVICE);
    }

    public void scanForNetwork(Context c, WifiManagerListener listener, String AJlookupPrefix)
    {
        m_listener = listener;
        m_context = c;
        m_wifi = (WifiManager) m_context.getSystemService(Context.WIFI_SERVICE);

        /* listen to Wi-Fi intents */
        m_scanner = new BroadcastReceiver() {
            // will get here after scan
            @Override
            public void onReceive(Context context, Intent intent)
            {
                // === Current scans ===
                List<ScanResult> scans = m_wifi.getScanResults();

                // remove duplicate SSID with different BSSID ,
                if (scans != null){

                    // keep one item per SSID, the one with the strongest signal
                    HashMap<String, ScanResult> alljoynSoftAPs = new HashMap<String, ScanResult>();
                    for (ScanResult currentScan : scans){
                        ScanResult l=alljoynSoftAPs.get(currentScan.SSID);
                        if (l==null)
                        {
                            alljoynSoftAPs.put(currentScan.SSID, currentScan);
                        }else{
                            if (l.level<currentScan.level)
                            {
                                alljoynSoftAPs.put(currentScan.SSID, currentScan);
                            }
                        }

                    }

                    // sort list by level of Wi-Fi signal
                    List <ScanResult> list=new ArrayList<ScanResult>(alljoynSoftAPs.values());
                    Collections.sort(list, new Comparator<ScanResult>() {
                        public int compare(ScanResult o1, ScanResult o2) {
                            if (o1.level > o2.level)
                                return -1;
                            else if (o1.level < o2.level)
                                return 1;
                            else
                                return 0;
                        }
                    });
                    // listener callback
                    m_listener.OnScanResultComplete(list);

                }
            }
        };

        // register for Wi-Fi intents that will be generated by the scanning process
        IntentFilter filter = new IntentFilter();
        filter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);
        filter.addAction(WifiManager.NETWORK_IDS_CHANGED_ACTION);
        filter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);
        filter.addAction(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION);
        filter.addAction(WifiManager.SUPPLICANT_STATE_CHANGED_ACTION);
        filter.addAction(WifiManager.RSSI_CHANGED_ACTION);
        filter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);
        m_context.registerReceiver(m_scanner, filter);

        // start a scan
        m_wifi.startScan();
    }
}
